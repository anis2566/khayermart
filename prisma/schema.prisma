// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  clerkId String @unique
  name    String
  email   String
  imageUrl String?
  role    String      @default("user")
  phone String?

  orders Order[]
  address ShippingInfo[]
  sellerOrders SellerOrder[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Todo {
  id String @id @default(uuid())
  title String  
  isCompleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id String @id @default(uuid())
  name  String
  description String @db.Text
  featureImageUrl String
  images  String[] @default([])
  totalStock  Int?
  price Int
  discountPrice Int?
  sellerPrice Int?
  status  String @default("DRAFT")
  featureTitle String?
  startDeal DateTime?
  endDeal DateTime?
  stairs String?

  genre String[]

  stocks  Stock[]
  colors String[] @default([])

  categoryId String
  category  Category @relation(fields: [categoryId], references: [id])

  brandId String
  brand  Brand @relation(fields: [brandId], references: [id])

  orderProducts OrderProduct[]
  quickOrders QuickOrder[]
  sellerOrderProducts SellerOrderProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Brand {
  id String @id @default(uuid())
  name String @unique
  imageUrl String

  products Product[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id String @id @default(uuid())
  name String
  description String? @db.Text
  imageUrl String
  tags String[] @default([])

  products Product[] 

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Stock {
  id String @id @default(uuid())
  total Int
  size  String?
  color String?

  productId String?
  product Product? @relation(fields: [productId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Coupon {
  id String @id @default(uuid())
  name String
  code String
  imageUrl String
  value Int
  startDate DateTime
  expiryDate DateTime
  status String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id String @id @default(uuid())
  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  products OrderProduct[]

  totalAmount Int
  status String @default("PENDING")
  paymentMethod String
  paymentStatus String? 
  deliveryFee Int @default(120)

  shippingInfoId String
  shippingInfo ShippingInfo @relation(fields: [shippingInfoId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrderProduct {
  quantity Int
  size String?
  color String?  

  orderId String
  order Order @relation(fields: [orderId], references: [id])

  productId String
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)


  @@id([orderId, productId])
}

model ShippingInfo {
  id String @id @default(uuid())
  infoName String?
  name String
  division String
  address String
  phone String

  orders Order[]
  userId String?
  user User? @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model QuickOrder {
  id String @id @default(uuid())
  name String
  address String
  phone String

  quantity Int
  size String?
  color String?
  deliveryFee Int
  total Int

  status String @default("PENDING")

  productId String
  product Product @relation(fields: [productId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SellerOrder {
  id String @id @default(uuid())
  customerName String
  address String @db.Text
  mobile String
  total Int
  deliveryFee Int
  status String @default("pending")
  trackingId String?

  userId String
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  orderProducts SellerOrderProduct[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SellerOrderProduct {
  id String @id @default(uuid())
  price Int
  quantity Int
  size String?
  color String?

  productId String 
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  orderId String // Foreign key to Order
  order SellerOrder @relation(fields: [orderId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Banner {
  id String @id @default(uuid())
  imageUrl String
  status String @default("DRAFT")

  productId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}